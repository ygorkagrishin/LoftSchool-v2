{"version":3,"sources":["error.js","lazyImage.js","map.js","popup.js","test.js"],"names":["$W","window","$D","document","DATA","DATA_SRC","IMAGES","querySelectorAll","CONFIG","root","rootMargin","threshold","IMAGES_COUNT","length","observer","loadBackgroundsImmediately","initIntersectionObserver","onIntersection","configuration","IntersectionObserver","i","img","observe","preloadBackgrounds","currentSection","value","hasAttribute","getAttribute","style","background","removeAttribute","entries","len","entry","intersectionRatio","unobserve","target","ymaps","ready","initYmaps","container","myMap","Map","center","controls","zoom","coords","myCollection","GeoObjectCollection","add","Placemark","iconLayout","iconImageHref","iconImageSize","geoObjects","COLLAPSED","BUTTONS","BUTTONS_CLOSE","currentModal","openModal","e","preventDefault","that","id","querySelector","classList","contains","remove","closeModal","button","addEventListener","buttonClose"],"mappings":"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","file":"common.min.js","sourcesContent":["","(() => {\r\n\r\nconst \r\n    $W = window,\r\n    $D = document;\r\n\r\nconst \r\n    DATA = 'data-lazy',\r\n    DATA_SRC = 'data-src';\r\n    \r\nconst \r\n    IMAGES = $D.querySelectorAll(`[${DATA}]`);\r\n\r\nconst \r\n    CONFIG = {\r\n        root: null,\r\n        rootMargin: '0px',\r\n        threshold: 0.5\r\n}\r\n\r\nconst IMAGES_COUNT = IMAGES.length;\r\n\r\nlet observer = !('IntersectionObserver' in $W) ? loadBackgroundsImmediately(IMAGES) : \r\ninitIntersectionObserver(onIntersection, CONFIG);\r\n\r\nfunction initIntersectionObserver(onIntersection, configuration) {\r\n    observer = new IntersectionObserver(onIntersection, configuration);\r\n    \r\n    for (let i=0; i<IMAGES_COUNT; i++) {\r\n        let img = IMAGES[i];\r\n        observer.observe(img);\r\n    }\r\n\r\n    return observer\r\n}\r\n\r\nfunction loadBackgroundsImmediately() {\r\n    for (let i=0; i<IMAGES_COUNT; i++) {\r\n        let img = IMAGES_COUNT[i];\r\n\r\n        preloadBackgrounds(img);\r\n    }\r\n}\r\n\r\nfunction preloadBackgrounds(img) {\r\n    let \r\n        currentSection = img,\r\n        value = currentSection.hasAttribute(DATA) && currentSection.hasAttribute(DATA_SRC) ? \r\n        currentSection.getAttribute(DATA_SRC) : false;\r\n\r\n    if (!value) { \r\n        return false;\r\n    }\r\n    \r\n    currentSection.style.background = value;\r\n    currentSection.removeAttribute(DATA);\r\n}\r\n\r\nfunction onIntersection(entries) {\r\n    for (let i=0, len=entries.length-1; i<=len; i++) {\r\n        let entry = entries[i];\r\n\r\n        if (entry.intersectionRatio > 0) {\r\n            observer.unobserve(entry.target);\r\n            preloadBackgrounds(entry.target);\r\n        }\r\n    }\r\n}\r\n\r\n})();","ymaps.ready(() => {\r\n    initYmaps(ymaps, 'map');\r\n});\r\n\r\nfunction initYmaps(ymaps, container) {\r\n    const myMap = new ymaps.Map(container, {\r\n        center: [59.94, 30.30],\r\n        controls: [],\r\n        zoom: 11\r\n    });\r\n\r\n    const coords = \r\n    [ \r\n        [ 59.97, 30.31 ],\r\n        [ 59.95, 30.38 ],\r\n        [ 59.91, 30.48 ],\r\n        [ 59.88, 30.31 ] \r\n    ]\r\n\r\n    const myCollection = new ymaps.GeoObjectCollection();\r\n\r\n    for (let i = 0; i < coords.length; i++) {\r\n        myCollection.add(new ymaps.Placemark(coords[i], {}, { \r\n            iconLayout: \"default#image\",\r\n            iconImageHref: \"images/content/contact/map-marker.svg\",\r\n            iconImageSize: [ 46, 57.727 ]\r\n        }));\r\n    }\r\n    \r\n    myMap.geoObjects.add(myCollection);\r\n}","(() => {\r\n\r\nconst \r\n    $W = window,\r\n    $D = document;\r\n\r\nconst \r\n    DATA = 'data-popup',\r\n    DATA_SRC = 'data-src';\r\n\r\nconst \r\n    COLLAPSED = 'collapsed';\r\n\r\nconst\r\n    BUTTONS = $D.querySelectorAll('.review__btn'),\r\n    BUTTONS_CLOSE = $D.querySelectorAll('.review__close');\r\n\r\nlet currentModal;\r\n\r\nfunction openModal(e) {\r\n    e.preventDefault();\r\n\r\n    let \r\n        that = this,\r\n        id = that.hasAttribute(DATA) && that.hasAttribute(DATA_SRC) ?\r\n        that.getAttribute(DATA_SRC) : false;\r\n\r\n    if (!id) {\r\n        return;\r\n    }\r\n\r\n    currentModal = $D.querySelector(id);\r\n\r\n    return currentModal.classList.contains(COLLAPSED) ? \r\n    currentModal.classList.remove(COLLAPSED) : false;\r\n}\r\n\r\nfunction closeModal(e) {\r\n    e.preventDefault();\r\n\r\n    if (!currentModal) {\r\n        return;\r\n    }\r\n\r\n    return !currentModal.classList.contains(COLLAPSED) ? \r\n    currentModal.classList.add(COLLAPSED) : false;\r\n}\r\n\r\nfor (let i = 0, len = BUTTONS.length; i < len; i++) {\r\n    let button = BUTTONS[i];\r\n\r\n    button.addEventListener('click', openModal, false);\r\n}\r\n\r\nfor (let i = 0, len = BUTTONS_CLOSE.length; i < len; i++) {\r\n    let buttonClose = BUTTONS_CLOSE[i];\r\n\r\n    buttonClose.addEventListener('click', closeModal, false);\r\n}\r\n\r\n})();",""]}