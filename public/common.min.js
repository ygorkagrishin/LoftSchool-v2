"use strict";
'use strict';

(function () {

    var $W = window,
        $D = document;

    var DATA = 'data-lazy',
        DATA_SRC = 'data-src';

    var IMAGES = $D.querySelectorAll('[' + DATA + ']');

    var CONFIG = {
        root: null,
        rootMargin: '0px',
        threshold: 0.5
    };

    var IMAGES_COUNT = IMAGES.length;

    var observer = !('IntersectionObserver' in $W) ? loadBackgroundsImmediately(IMAGES) : initIntersectionObserver(onIntersection, CONFIG);

    function initIntersectionObserver(onIntersection, configuration) {
        observer = new IntersectionObserver(onIntersection, configuration);

        for (var i = 0; i < IMAGES_COUNT; i++) {
            var img = IMAGES[i];
            observer.observe(img);
        }

        return observer;
    }

    function loadBackgroundsImmediately() {
        for (var i = 0; i < IMAGES_COUNT; i++) {
            var img = IMAGES_COUNT[i];

            preloadBackgrounds(img);
        }
    }

    function preloadBackgrounds(img) {
        var currentSection = img,
            value = currentSection.hasAttribute(DATA) && currentSection.hasAttribute(DATA_SRC) ? currentSection.getAttribute(DATA_SRC) : false;

        if (!value) {
            return false;
        }

        currentSection.style.background = value;
        currentSection.removeAttribute(DATA);
    }

    function onIntersection(entries) {
        for (var i = 0, len = entries.length - 1; i <= len; i++) {
            var entry = entries[i];

            if (entry.intersectionRatio > 0) {
                observer.unobserve(entry.target);
                preloadBackgrounds(entry.target);
            }
        }
    }
})();
"use strict";

ymaps.ready(function () {
    initYmaps(ymaps, 'map');
});

function initYmaps(ymaps, container) {
    var myMap = new ymaps.Map(container, {
        center: [59.94, 30.30],
        controls: [],
        zoom: 11
    });

    var coords = [[59.97, 30.31], [59.95, 30.38], [59.91, 30.48], [59.88, 30.31]];

    var myCollection = new ymaps.GeoObjectCollection();

    for (var i = 0; i < coords.length; i++) {
        myCollection.add(new ymaps.Placemark(coords[i], {}, {
            iconLayout: "default#image",
            iconImageHref: "images/content/contact/map-marker.svg",
            iconImageSize: [46, 57.727]
        }));
    }

    myMap.geoObjects.add(myCollection);
}
'use strict';

(function () {

    var trigger = document.querySelector('.navbar-trigger');

    var navbar = document.querySelector('.navbar'),
        navbarClose = document.querySelector('.navbar__close');

    var stateActive = 'navbar_state_active',
        bodyStateActive = 'navbar-mobile-active';

    function getState() {
        return !navbar.classList.contains(stateActive) && !document.body.classList.contains(bodyStateActive) ? false : true;
    }

    function menuOpen() {
        if (!getState()) {
            navbar.classList.add(stateActive);
            document.body.classList.add(bodyStateActive);
        }
    }

    trigger.addEventListener('click', menuOpen);

    function menuClose() {
        if (getState()) {
            navbar.classList.remove(stateActive);
            document.body.classList.remove(bodyStateActive);
        }
    }

    navbarClose.addEventListener('click', menuClose);

    function handler(e) {
        if (e.target.tagName.toLowerCase() === 'a') {
            return getState() ? menuClose() : false;
        }
    }

    navbar.addEventListener('click', handler);
})();
'use strict';

(function () {

    var $W = window,
        $D = document;

    var DATA = 'data-popup',
        DATA_SRC = 'data-src';

    var COLLAPSED = 'collapsed';

    var BUTTONS = $D.querySelectorAll('.review__btn'),
        BUTTONS_CLOSE = $D.querySelectorAll('.review__close');

    var currentModal = void 0;

    function openModal(e) {
        e.preventDefault();

        var that = this,
            id = that.hasAttribute(DATA) && that.hasAttribute(DATA_SRC) ? that.getAttribute(DATA_SRC) : false;

        if (!id) {
            return;
        }

        currentModal = $D.querySelector(id);

        return currentModal.classList.contains(COLLAPSED) ? currentModal.classList.remove(COLLAPSED) : false;
    }

    function closeModal(e) {
        e.preventDefault();

        if (!currentModal) {
            return;
        }

        return !currentModal.classList.contains(COLLAPSED) ? currentModal.classList.add(COLLAPSED) : false;
    }

    for (var i = 0, len = BUTTONS.length; i < len; i++) {
        var button = BUTTONS[i];

        button.addEventListener('click', openModal, false);
    }

    for (var _i = 0, _len = BUTTONS_CLOSE.length; _i < _len; _i++) {
        var buttonClose = BUTTONS_CLOSE[_i];

        buttonClose.addEventListener('click', closeModal, false);
    }
})();
"use strict";
//# sourceMappingURL=common.min.js.map
