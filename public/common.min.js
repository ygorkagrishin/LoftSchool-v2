'use strict';

(function () {

    var win = window,
        doc = document;

    var acco = doc.querySelector('#acco'),
        sections = acco.children;

    var collapsed = 'collapsed';

    for (var i = 0, len = sections.length; i < len; i++) {
        var section = sections[i];

        section.addEventListener('click', sectionHandler, false);
    }

    function sectionHandler(e) {
        e.preventDefault();

        var section = this;

        return section.classList.contains(collapsed) ? toOpenSection(section) : toCloseSection(section);
    }

    function toOpenSection(sect) {
        var section = sect,
            sectionContent = section.querySelector('.team__cont'),
            sectionContentHeight = sectionContent.firstElementChild.clientHeight;

        toCloseSections();

        section.classList.remove(collapsed);
        sectionContent.style.height = sectionContentHeight + 'px';
    }

    function toCloseSection(sect) {
        var section = sect,
            sectionContent = section.querySelector('.team__cont'),
            sectionContentHeight = sectionContent.firstElementChild.clientHeight;

        sectionContent.removeAttribute('style');
        section.classList.add(collapsed);
    }

    function toCloseSections() {
        for (var _i = 0, _len = sections.length; _i < _len; _i++) {
            var _section = sections[_i];

            if (_section.classList.contains(collapsed)) {
                continue;
            }

            toCloseSection(_section);
        }
    }
})();
'use strict';

(function () {

    var win = window,
        doc = document;

    var carousel = doc.querySelector('#carousel'),
        wrapper = carousel.querySelector('.burger__wrap'),
        slides = wrapper.children;

    var prev = doc.querySelector('.burger__prev'),
        next = doc.querySelector('.burger__next');

    var clone = wrapper.firstElementChild.cloneNode(true),
        appendClone = wrapper.appendChild(clone);

    var position = 0,
        maxPosition = slides.length - 1;

    var products = carousel.querySelectorAll('.burger__comp'),
        closeProducts = carousel.querySelectorAll('.burger__close'),
        productHover = false;

    var x = 0,
        y = 0;

    var newX = 0,
        newY = 0;

    var duration = 700;

    var autoPlayTimer = void 0,
        autoPlaySpeed = 5000;

    for (var i = 0, len = products.length; i < len; i++) {
        var product = products[i];
        product.addEventListener('mouseover', productsOnHoverHandler);
    }

    function productsOnHoverHandler(e) {
        productHover = true;

        var product = slides[position].querySelector('.burger__comp');

        return !product.classList.contains('active') ? product.classList.add('active') : false;
    }

    for (var _i = 0, _len = products.length; _i < _len; _i++) {
        var _product = products[_i];
        _product.addEventListener('mouseout', productOffHoverHandler);
    }

    function productOffHoverHandler() {
        productHover = false;

        var product = slides[position].querySelector('.burger__comp');

        return product.classList.contains('active') ? product.classList.remove('active') : false;
    }

    for (var _i2 = 0, _len2 = products.length; _i2 < _len2; _i2++) {
        var _product2 = products[_i2];
        _product2.addEventListener('click', productsHandler, false);
    }

    function productsHandler() {
        autoPlayClear();

        if (productHover) {
            return;
        }

        var product = slides[position].querySelector('.burger__comp');

        return !product.classList.contains('active') ? product.classList.add('active') : product.classList.remove('active');
    }

    for (var _i3 = 0, _len3 = closeProducts.length; _i3 < _len3; _i3++) {
        var closeProduct = closeProducts[_i3];
        closeProduct.addEventListener('click', closeProductHandler, false);
    }

    function closeProductHandler(e) {
        e.stopPropagation();

        var products = slides[position].querySelector('.burger__comp');

        return products.classList.contains('active') ? products.classList.remove('active') : false;
    }

    next.addEventListener('click', function () {
        autoPlayClear();

        return toSwitchToNextSlide().then(toSwitchSlide, toSwitchToFirstSlide);
    });

    function toSwitchToNextSlide() {
        return new Promise(function (resolve, reject) {
            ++position;

            if (position > maxPosition) {
                reject();
            }

            resolve();
        });
    }

    prev.addEventListener('click', function () {
        autoPlayClear();

        return toSwitchToPrevSlide().then(toSwitchSlide, toSwitchToLastSlide);
    });

    function toSwitchToPrevSlide() {
        return new Promise(function (resolve, reject) {
            --position;

            if (position < 0) {
                reject();
            }

            resolve();
        });
    }

    window.addEventListener('load', function () {
        return autoPlay();
    });

    carousel.addEventListener('mouseover', function () {
        return autoPlayClear();
    });

    function autoPlay() {
        autoPlayClear();

        autoPlayTimer = setInterval(function () {
            return toSwitchToNextSlide().then(toSwitchSlide, toSwitchToFirstSlide);
        }, autoPlaySpeed);
    }

    function autoPlayClear() {
        if (autoPlayTimer) {
            return clearInterval(autoPlayTimer);
        }
    }

    carousel.addEventListener('touchstart', function (e) {
        if (e.changedTouches.length !== 1) {
            return;
        }

        autoPlayClear();

        var touch = e.changedTouches[0];

        x = touch.pageX;
        y = touch.pageY;
    });

    carousel.addEventListener('touchmove', function (e) {
        if (e.changedTouches.length !== 1) {
            return;
        }
    });

    carousel.addEventListener('touchend', function (e) {
        if (e.changedTouches.length !== 1) {
            return;
        }

        var touch = e.changedTouches[0];

        newX = touch.pageX;
        newY = touch.pageY;

        var deltaX = x - newX,
            deltaY = y - newY;

        if (Math.abs(deltaY) >= Math.abs(deltaX)) {
            return;
        }

        return x > newX ? toSwitchToNextSlide().then(toSwitchSlide, toSwitchToFirstSlide) : toSwitchToPrevSlide().then(toSwitchSlide, toSwitchToLastSlide);
    });

    function toSwitchToFirstSlide() {
        position = 0;

        var style = wrapper.style;

        style.transition = 'all 0ms';
        style.transform = 'translate(-' + position + '00%, 0)';

        ++position;

        toSwitchSlide();
    }

    function toSwitchToLastSlide() {
        position = maxPosition;

        var style = wrapper.style;

        style.transition = 'all 0ms';
        style.transform = 'translate(-' + position + '00%, 0)';

        --position;

        toSwitchSlide();
    }

    function toSwitchSlide() {
        setTimeout(function () {
            var style = wrapper.style;

            style.transition = 'all ' + duration + 'ms';
            style.transform = 'translate(-' + position + '00%, 0)';
        }, 25);
    }
})();
'use strict';

(function () {

    var win = window,
        doc = document;

    var errors = doc.querySelector('.err'),
        attr = 'hidden';

    /* Orientation */
    win.addEventListener('orientationchange', function () {

        var orientation = win.orientation,
            err = doc.querySelector('.err__orient');

        switch (orientation) {
            case 0:
                if (err.classList.contains('active') && !errors.hasAttribute(attr)) {
                    errors.setAttribute(attr, '');
                    err.classList.remove('active');
                }
                break;
            case 90:
                if (!err.classList.contains('active') && errors.hasAttribute(attr)) {
                    errors.removeAttribute(attr);
                    err.classList.add('active');
                }
                break;
            case -90:
                if (!err.classList.contains('active') && errors.hasAttribute(attr)) {
                    errors.removeAttribute(attr);
                    err.classList.add('active');
                }
                break;
        }
    });
})();
'use strict';

(function () {

    var win = window,
        doc = document;

    var data = 'data-lazy',
        dataSrc = 'data-src';

    var dataLazyBg = 'data-lazy-bg',
        dataLazyPic = 'data-lazy-pic';

    var dataTargets = doc.querySelectorAll('[' + data + ']');

    var config = {
        root: null,
        rootMargin: '0px',
        threshold: 0.5
    };

    var dataTargetsCount = dataTargets.length;

    var observer = !('IntersectionObserver' in win) ? loadImagesImmediately() : initIntersectionObserver(onIntersection, config);

    function initIntersectionObserver(onIntersection, configuration) {
        observer = new IntersectionObserver(onIntersection, configuration);

        for (var i = 0; i < dataTargetsCount; i++) {
            var dataTarget = dataTargets[i];
            observer.observe(dataTarget);
        }

        return observer;
    }

    function loadImagesImmediately() {
        for (var i = 0; i < dataTargetsCount; i++) {
            var dataTarget = dataTargetsCount[i];

            if (dataTarget.hasAttribute(dataLazyBg)) {
                preloadBackground(dataTarget);
            } else if (dataTarget.hasAttribute(dataLazyPic)) {
                preloadImg(dataTarget);
            } else {
                return;
            }
        }
    }

    function preloadBackground(target) {
        var elem = target,
            path = elem.hasAttribute(data) && elem.hasAttribute(dataSrc) ? elem.getAttribute(dataSrc) : false;

        if (!path) {
            return false;
        }

        elem.style.background = path;
        elem.removeAttribute(dataSrc);
    }

    function preloadImg(target) {
        var img = target,
            path = img.hasAttribute(data) && img.hasAttribute(dataSrc) ? img.getAttribute(dataSrc) : false;

        if (!path) {
            return false;
        }

        img.setAttribute('src', path);
        img.removeAttribute(dataSrc);
    }

    function onIntersection(entries) {
        for (var i = 0, len = entries.length - 1; i <= len; i++) {
            var entry = entries[i];

            if (entry.intersectionRatio > 0) {
                observer.unobserve(entry.target);
                if (entry.target.hasAttribute(dataLazyBg)) {
                    preloadBackground(entry.target);
                } else if (entry.target.hasAttribute(dataLazyPic)) {
                    preloadImg(entry.target);
                } else {
                    return;
                }
            }
        }
    }
})();
"use strict";

ymaps.ready(function () {
    initYmaps(ymaps, 'map');
});

function initYmaps(ymaps, container) {
    var myMap = new ymaps.Map(container, {
        center: [59.94, 30.30],
        controls: [],
        zoom: 11
    });

    var coords = [[59.97, 30.31], [59.95, 30.38], [59.91, 30.48], [59.88, 30.31]];

    var myCollection = new ymaps.GeoObjectCollection();

    for (var i = 0; i < coords.length; i++) {
        myCollection.add(new ymaps.Placemark(coords[i], {}, {
            iconLayout: "default#image",
            iconImageHref: "images/content/contact/map-marker.svg",
            iconImageSize: [46, 57.727]
        }));
    }

    myMap.geoObjects.add(myCollection);
}
'use strict';

(function () {

    var win = window,
        doc = document;

    var menu = doc.querySelector('.menu__acco'),
        menuSectCollection = menu.children;

    var state = 'collapsed';

    for (var i = 0, len = menuSectCollection.length; i < len; i++) {
        var menuSect = menuSectCollection[i];
        menuSect.addEventListener('click', menuSectHandler, false);
    }

    function menuSectHandler() {
        var currentSection = this;
        return currentSection.classList.contains(state) ? openSect(currentSection) : closeSect(currentSection);
    }

    function openSect(sect) {
        destroy();

        var section = sect;
        return section.classList.remove(state);
    }

    function closeSect(sect) {
        var section = sect;
        return section.classList.add(state);
    }

    function destroy() {
        for (var _i = 0, _len = menuSectCollection.length; _i < _len; _i++) {
            var _menuSect = menuSectCollection[_i];

            if (!_menuSect.classList.contains(state)) {
                _menuSect.classList.add(state);
            } else {
                continue;
            }
        }
    }
})();
'use strict';

(function () {

    var trigger = document.querySelector('.navbar-trigger');

    var navbar = document.querySelector('.navbar'),
        navbarClose = document.querySelector('.navbar__close');

    var stateActive = 'navbar_state_active',
        bodyStateActive = 'navbar-mobile-active';

    function getState() {
        return !navbar.classList.contains(stateActive) && !document.body.classList.contains(bodyStateActive) ? false : true;
    }

    function menuOpen() {
        if (!getState()) {
            navbar.classList.add(stateActive);
            document.body.classList.add(bodyStateActive);
        }
    }

    trigger.addEventListener('click', menuOpen);

    function menuClose() {
        if (getState()) {
            navbar.classList.remove(stateActive);
            document.body.classList.remove(bodyStateActive);
        }
    }

    navbarClose.addEventListener('click', menuClose);

    function handler(e) {
        if (e.target.tagName.toLowerCase() === 'a') {
            return getState() ? menuClose() : false;
        }
    }

    navbar.addEventListener('click', handler);
})();
'use strict';

(function () {

    var win = window,
        doc = document;

    var data = 'data-popup',
        dataId = 'data-id';

    var buttons = doc.querySelectorAll('.review__btn'),
        buttonsClose = doc.querySelectorAll('.review__close');

    var collapsed = 'collapsed';

    var modal = null;

    for (var i = 0, len = buttons.length; i < len; i++) {
        var btn = buttons[i];
        btn.addEventListener('click', openHandler, false);
    }

    function openHandler(e) {
        e.preventDefault();

        var btn = this,
            id = btn.hasAttribute(data) && btn.hasAttribute(dataId) ? btn.getAttribute(dataId) : false;

        if (!id) return;

        modal = doc.querySelector(id);

        modal.classList.contains(collapsed) ? modal.classList.remove(collapsed) : false;
    }

    for (var _i = 0, _len = buttonsClose.length; _i < _len; _i++) {
        var close = buttonsClose[_i];

        close.addEventListener('click', closeHandler);
    }

    function closeHandler() {
        return !modal.classList.contains(collapsed) ? modal.classList.add(collapsed) : false;
    }
})();
'use strict';

(function () {

    var WIN = window,
        DOC = document,
        BODY = DOC.body;

    var WRAPPER = BODY.querySelector('.wrapper'),
        SECTIONS = WRAPPER.children,
        SECTIONS_LENGTH = SECTIONS.length;

    var SWITCHED = BODY.querySelector('.switch'),
        DOTS = SWITCHED.getElementsByTagName('a'),
        DOTS_LENGTH = DOTS.length;

    var DATA_NAME = 'data-scroll',
        DATA_TARGET = 'data-anchor';

    var x = 0,
        y = 0;

    var newX = 0,
        newY = 0;

    var counterSection = 0,
        currentSection = SECTIONS[counterSection];

    for (var i = 0; i < DOTS_LENGTH; i++) {
        var dot = DOTS[i];
        dot.addEventListener('click', handler, false);
    }

    function handler(e) {
        e.preventDefault();

        var dot = this,
            id = null;

        dot.hasAttribute(DATA_NAME) && dot.hasAttribute(DATA_TARGET) ? id = dot.getAttribute(DATA_TARGET) : false;

        if (!id) return;

        for (var _i = 0; _i < SECTIONS_LENGTH; _i++) {
            var section = SECTIONS[_i];

            if (section.id !== id) continue;else counterSection = _i;
        }

        currentSection = SECTIONS[counterSection];

        viewCurrentSection();

        draw();
    }

    WRAPPER.addEventListener('touchstart', function (e) {
        var touches = e.changedTouches;

        if (touches.length !== 1) return;

        var touch = touches[0];

        x = touch.pageX;
        y = touch.pageY;
    });

    WRAPPER.addEventListener('touchmove', function (e) {
        if (e.changedTouches.length !== 1) return;
    });

    WRAPPER.addEventListener('touchend', function (e) {
        var touches = e.changedTouches;

        if (touches.length !== 1) return;

        var touch = touches[0];

        newX = touch.pageX;
        newY = touch.pageY;

        var deltaX = x - newX,
            deltaY = y - newY;

        if (Math.abs(deltaX) >= Math.abs(deltaY)) return;

        if (y > newY && SECTIONS_LENGTH >= counterSection) ++counterSection;else if (newY > y && counterSection >= 0) --counterSection;

        currentSection = SECTIONS[counterSection];

        viewCurrentSection();

        draw();
    });

    function draw() {
        var coord = currentSection.offsetTop;

        WRAPPER.style.transition = 'all .7s';
        WRAPPER.style.transform = 'translate(0, -' + coord + 'px)';
    }

    function viewCurrentSection() {
        for (var _i2 = 0; _i2 < DOTS_LENGTH; _i2++) {
            var _dot = DOTS[_i2];

            if (!_dot.classList.contains('active')) continue;else _dot.classList.remove('active');
        }

        DOTS[counterSection].classList.add('active');
    }
})();
"use strict";
//# sourceMappingURL=common.min.js.map
