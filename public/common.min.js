'use strict';

(function () {

    var win = window,
        doc = document;

    var acco = doc.querySelector('#acco'),
        sections = acco.children;

    var sectionContent = null;

    var collapsed = 'collapsed';

    function handler(e) {
        e.preventDefault();

        var that = this;

        return that.classList.contains(collapsed) ? openSection(that) : closeSection(that);
    }

    function destroy() {
        if (sectionContent === null) {
            return;
        }

        for (var i = 0, len = sections.length; i < len; i++) {
            var currentSection = sections[i];

            if (currentSection.classList.contains(collapsed)) {
                continue;
            }

            console.log(currentSection);
            closeSection(currentSection);
        }
    }

    function openSection(sect) {
        var section = sect;

        destroy();
        sectionContent = section.querySelector('.team__cont');

        var sectionContentHeight = sectionContent.firstElementChild.clientHeight;

        section.classList.remove(collapsed);
        sectionContent.style.height = sectionContentHeight + 'px';
    }

    function closeSection(sect) {
        var section = sect;

        section.classList.add(collapsed);
        sectionContent.removeAttribute('style');
    }

    for (var i = 0, len = sections.length; i < len; i++) {
        var currentSection = sections[i];

        currentSection.addEventListener('click', handler, false);
    }
})();
'use strict';

(function () {

    var win = window,
        doc = document;

    var carousel = doc.querySelector('#carousel'),
        wrapper = carousel.querySelector('.burger__wrap'),
        slides = wrapper.children;

    var prev = doc.querySelector('.burger__prev'),
        next = doc.querySelector('.burger__next');

    var clone = wrapper.firstElementChild.cloneNode(true),
        appendClone = wrapper.appendChild(clone);

    var position = 0,
        maxPosition = slides.length - 1;

    var products = carousel.querySelectorAll('.burger__comp'),
        closeProducts = carousel.querySelectorAll('.burger__close'),
        productHover = false;

    var x = 0,
        y = 0;

    var newX = 0,
        newY = 0;

    var duration = 700;

    var autoPlayTimer = void 0,
        autoPlaySpeed = 5000;

    for (var i = 0, len = products.length; i < len; i++) {
        var product = products[i];
        product.addEventListener('mouseover', productsOnHoverHandler);
    }

    function productsOnHoverHandler(e) {
        productHover = true;

        var product = slides[position].querySelector('.burger__comp');

        return !product.classList.contains('active') ? product.classList.add('active') : false;
    }

    for (var _i = 0, _len = products.length; _i < _len; _i++) {
        var _product = products[_i];
        _product.addEventListener('mouseout', productOffHoverHandler);
    }

    function productOffHoverHandler() {
        productHover = false;

        var product = slides[position].querySelector('.burger__comp');

        return product.classList.contains('active') ? product.classList.remove('active') : false;
    }

    for (var _i2 = 0, _len2 = products.length; _i2 < _len2; _i2++) {
        var _product2 = products[_i2];
        _product2.addEventListener('click', productsHandler, false);
    }

    function productsHandler() {
        autoPlayClear();

        if (productHover) {
            return;
        }

        var product = slides[position].querySelector('.burger__comp');

        return !product.classList.contains('active') ? product.classList.add('active') : product.classList.remove('active');
    }

    for (var _i3 = 0, _len3 = closeProducts.length; _i3 < _len3; _i3++) {
        var closeProduct = closeProducts[_i3];
        closeProduct.addEventListener('click', closeProductHandler, false);
    }

    function closeProductHandler(e) {
        e.stopPropagation();

        var products = slides[position].querySelector('.burger__comp');

        return products.classList.contains('active') ? products.classList.remove('active') : false;
    }

    next.addEventListener('click', function () {
        autoPlayClear();

        return toSwitchToNextSlide().then(toSwitchSlide, toSwitchToFirstSlide);
    });

    function toSwitchToNextSlide() {
        return new Promise(function (resolve, reject) {
            ++position;

            if (position > maxPosition) {
                reject();
            }

            resolve();
        });
    }

    prev.addEventListener('click', function () {
        autoPlayClear();

        return toSwitchToPrevSlide().then(toSwitchSlide, toSwitchToLastSlide);
    });

    function toSwitchToPrevSlide() {
        return new Promise(function (resolve, reject) {
            --position;

            if (position < 0) {
                reject();
            }

            resolve();
        });
    }

    window.addEventListener('load', function () {
        return autoPlay();
    });

    carousel.addEventListener('mouseover', function () {
        return autoPlayClear();
    });

    function autoPlay() {
        autoPlayClear();

        autoPlayTimer = setInterval(function () {
            return toSwitchToNextSlide().then(toSwitchSlide, toSwitchToFirstSlide);
        }, autoPlaySpeed);
    }

    function autoPlayClear() {
        if (autoPlayTimer) {
            return clearInterval(autoPlayTimer);
        }
    }

    carousel.addEventListener('touchstart', function (e) {
        if (e.changedTouches.length !== 1) {
            return;
        }

        autoPlayClear();

        var touch = e.changedTouches[0];

        x = touch.pageX;
        y = touch.pageY;
    });

    carousel.addEventListener('touchmove', function (e) {
        if (e.changedTouches.length !== 1) {
            return;
        }
    });

    carousel.addEventListener('touchend', function (e) {
        if (e.changedTouches.length !== 1) {
            return;
        }

        var touch = e.changedTouches[0];

        newX = touch.pageX;
        newY = touch.pageY;

        var deltaX = x - newX,
            deltaY = y - newY;

        if (Math.abs(deltaY) >= Math.abs(deltaX)) {
            return;
        }

        return x > newX ? toSwitchToNextSlide().then(toSwitchSlide, toSwitchToFirstSlide) : toSwitchToPrevSlide().then(toSwitchSlide, toSwitchToLastSlide);
    });

    function toSwitchToFirstSlide() {
        position = 0;

        var style = wrapper.style;

        style.transition = 'all 0ms';
        style.transform = 'translate(-' + position + '00%, 0)';

        ++position;

        toSwitchSlide();
    }

    function toSwitchToLastSlide() {
        position = maxPosition;

        var style = wrapper.style;

        style.transition = 'all 0ms';
        style.transform = 'translate(-' + position + '00%, 0)';

        --position;

        toSwitchSlide();
    }

    function toSwitchSlide() {
        setTimeout(function () {
            var style = wrapper.style;

            style.transition = 'all ' + duration + 'ms';
            style.transform = 'translate(-' + position + '00%, 0)';
        }, 25);
    }
})();
'use strict';

(function () {

    var win = window,
        doc = document;

    var errors = doc.querySelector('.err'),
        attr = 'hidden';

    /* Orientation */
    win.addEventListener('orientationchange', function () {

        var orientation = win.orientation,
            err = doc.querySelector('.err__orient');

        switch (orientation) {
            case 0:
                if (err.classList.contains('active') && !errors.hasAttribute(attr)) {
                    errors.setAttribute(attr, '');
                    err.classList.remove('active');
                }
                break;
            case 90:
                if (!err.classList.contains('active') && errors.hasAttribute(attr)) {
                    errors.removeAttribute(attr);
                    err.classList.add('active');
                }
                break;
            case -90:
                if (!err.classList.contains('active') && errors.hasAttribute(attr)) {
                    errors.removeAttribute(attr);
                    err.classList.add('active');
                }
                break;
        }
    });
})();
'use strict';

(function () {

    var $W = window,
        $D = document;

    var DATA = 'data-lazy',
        DATA_SRC = 'data-src';

    var IMAGES = $D.querySelectorAll('[' + DATA + ']');

    var CONFIG = {
        root: null,
        rootMargin: '0px',
        threshold: 0.5
    };

    var IMAGES_COUNT = IMAGES.length;

    var observer = !('IntersectionObserver' in $W) ? loadBackgroundsImmediately(IMAGES) : initIntersectionObserver(onIntersection, CONFIG);

    function initIntersectionObserver(onIntersection, configuration) {
        observer = new IntersectionObserver(onIntersection, configuration);

        for (var i = 0; i < IMAGES_COUNT; i++) {
            var img = IMAGES[i];
            observer.observe(img);
        }

        return observer;
    }

    function loadBackgroundsImmediately() {
        for (var i = 0; i < IMAGES_COUNT; i++) {
            var img = IMAGES_COUNT[i];

            preloadBackgrounds(img);
        }
    }

    function preloadBackgrounds(img) {
        var currentSection = img,
            value = currentSection.hasAttribute(DATA) && currentSection.hasAttribute(DATA_SRC) ? currentSection.getAttribute(DATA_SRC) : false;

        if (!value) {
            return false;
        }

        currentSection.style.background = value;
        currentSection.removeAttribute(DATA_SRC);
    }

    function onIntersection(entries) {
        for (var i = 0, len = entries.length - 1; i <= len; i++) {
            var entry = entries[i];

            if (entry.intersectionRatio > 0) {
                observer.unobserve(entry.target);
                preloadBackgrounds(entry.target);
            }
        }
    }
})();
"use strict";

ymaps.ready(function () {
    initYmaps(ymaps, 'map');
});

function initYmaps(ymaps, container) {
    var myMap = new ymaps.Map(container, {
        center: [59.94, 30.30],
        controls: [],
        zoom: 11
    });

    var coords = [[59.97, 30.31], [59.95, 30.38], [59.91, 30.48], [59.88, 30.31]];

    var myCollection = new ymaps.GeoObjectCollection();

    for (var i = 0; i < coords.length; i++) {
        myCollection.add(new ymaps.Placemark(coords[i], {}, {
            iconLayout: "default#image",
            iconImageHref: "images/content/contact/map-marker.svg",
            iconImageSize: [46, 57.727]
        }));
    }

    myMap.geoObjects.add(myCollection);
}
'use strict';

(function () {

    var win = window,
        doc = document;

    var menu = doc.querySelector('#menu'),
        menuSectCollection = menu.children;

    var state = 'collapsed';

    for (var i = 0, len = menuSectCollection.length; i < len; i++) {
        var menuSect = menuSectCollection[i];
        menuSect.addEventListener('click', menuSectHandler, false);
    }

    function menuSectHandler() {
        var currentSection = this;
        return currentSection.classList.contains(state) ? openSect(currentSection) : closeSect(currentSection);
    }

    function openSect(sect) {
        destroy();

        var section = sect;
        return section.classList.remove(state);
    }

    function closeSect(sect) {
        var section = sect;
        return section.classList.add(state);
    }

    function destroy() {
        for (var _i = 0, _len = menuSectCollection.length; _i < _len; _i++) {
            var _menuSect = menuSectCollection[_i];

            if (!_menuSect.classList.contains(state)) {
                _menuSect.classList.add(state);
            } else {
                continue;
            }
        }
    }
})();
'use strict';

(function () {

    var trigger = document.querySelector('.navbar-trigger');

    var navbar = document.querySelector('.navbar'),
        navbarClose = document.querySelector('.navbar__close');

    var stateActive = 'navbar_state_active',
        bodyStateActive = 'navbar-mobile-active';

    function getState() {
        return !navbar.classList.contains(stateActive) && !document.body.classList.contains(bodyStateActive) ? false : true;
    }

    function menuOpen() {
        if (!getState()) {
            navbar.classList.add(stateActive);
            document.body.classList.add(bodyStateActive);
        }
    }

    trigger.addEventListener('click', menuOpen);

    function menuClose() {
        if (getState()) {
            navbar.classList.remove(stateActive);
            document.body.classList.remove(bodyStateActive);
        }
    }

    navbarClose.addEventListener('click', menuClose);

    function handler(e) {
        if (e.target.tagName.toLowerCase() === 'a') {
            return getState() ? menuClose() : false;
        }
    }

    navbar.addEventListener('click', handler);
})();
'use strict';

(function () {

    var $W = window,
        $D = document;

    var DATA = 'data-popup',
        DATA_SRC = 'data-src';

    var COLLAPSED = 'collapsed';

    var BUTTONS = $D.querySelectorAll('.review__btn'),
        BUTTONS_CLOSE = $D.querySelectorAll('.review__close');

    var currentModal = void 0;

    function openModal(e) {
        e.preventDefault();

        var that = this,
            id = that.hasAttribute(DATA) && that.hasAttribute(DATA_SRC) ? that.getAttribute(DATA_SRC) : false;

        if (!id) {
            return;
        }

        currentModal = $D.querySelector(id);

        return currentModal.classList.contains(COLLAPSED) ? currentModal.classList.remove(COLLAPSED) : false;
    }

    function closeModal(e) {
        e.preventDefault();

        if (!currentModal) {
            return;
        }

        return !currentModal.classList.contains(COLLAPSED) ? currentModal.classList.add(COLLAPSED) : false;
    }

    for (var i = 0, len = BUTTONS.length; i < len; i++) {
        var button = BUTTONS[i];

        button.addEventListener('click', openModal, false);
    }

    for (var _i = 0, _len = BUTTONS_CLOSE.length; _i < _len; _i++) {
        var buttonClose = BUTTONS_CLOSE[_i];

        buttonClose.addEventListener('click', closeModal, false);
    }
})();
"use strict";
//# sourceMappingURL=common.min.js.map
